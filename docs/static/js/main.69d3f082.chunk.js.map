{"version":3,"sources":["Components/Header.js","Components/TeacherList.js","App.js","serviceWorker.js","index.js"],"names":["header","props","Jumbotron","className","fluid","pageTitle","subTitle","teacherList","onClickedTeacher","click","state","teacher","displayedNames","this","entries","map","entry","key","id","Row","Button","color","onClick","thisId","ourTeacher","find","setState","console","log","name","Component","App","buildList","data","teacherObjectEntries","teacherEntries","i","feed","content","$t","email","flipgrid","classroom","storeTeacher","clickedTeacher","goBack","fetch","then","response","json","teacherIsSelected","Container","Header","href","target","TeacherList","bind","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.69d3f082.chunk.js","sourcesContent":["import React from 'react';\r\nimport Jumbotron from 'react-bootstrap/Jumbotron';\r\n\r\nconst header = (props) => {\r\n    return (\r\n        <Jumbotron className='bg-primary text-warning pl-4' fluid>\r\n            <h1>{props.pageTitle}</h1>\r\n            <p>{props.subTitle}</p>\r\n        </Jumbotron>\r\n    )\r\n};\r\n\r\nexport default header;","import React, {Component} from 'react';\r\n// import Jumbotron from 'react-bootstrap/Jumbotron';\r\nimport {Row, Col, Button} from 'reactstrap';\r\nimport '../App.css';\r\n\r\n\r\nclass teacherList extends Component {\r\n\r\n    constructor(props) {\r\n        super();\r\n        this.state = {\r\n            teacher: null\r\n        }\r\n    }\r\n\r\n\r\n    onClickedTeacher = () => {\r\n\r\n        this.props.click(this.state.teacher)\r\n    }\r\n\r\n\r\n    render() {\r\n\r\n        const displayedNames = this.props.entries.map(entry => {\r\n            return (\r\n                <div key={entry.id}>\r\n                    <Row className='justify-content-center'>\r\n\r\n                        <Button color='link' id={entry.id} onClick={() => {\r\n                            const thisId = entry.id;\r\n                            const ourTeacher = this.props.entries.find(entry => entry.id === thisId);\r\n                            this.setState({\r\n                                teacher: ourTeacher\r\n                            }, () => {\r\n                                console.log('this is the state of TeacherList');\r\n                                console.log(this.state.teacher);\r\n                                this.onClickedTeacher(ourTeacher);\r\n                            })\r\n                           \r\n                        }}>\r\n                            {entry.name}\r\n                        </Button>\r\n\r\n\r\n                    </Row>\r\n                    <Row className='space'></Row>\r\n                </div>\r\n            \r\n            )\r\n        })\r\n    \r\n        return(\r\n            <div>{displayedNames}</div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default teacherList;","import React, { Component } from 'react';\n// import logo from './logo.svg';\nimport './App.css';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n// import Container from 'react-bootstrap/Container';\nimport { Container, Row, Col, Button } from 'reactstrap';\n// import Row from 'react-bootstrap/Row';\n// import Col from 'react-bootstrap/Col';\nimport Header from './Components/Header';\nimport TeacherList from './Components/TeacherList';\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      entries: [],\n      teacher: null\n    };\n  }\n\n\n\n  buildList = (data) => {\n\n    let teacherEntries = [];\n    let teacherObjectEntries = [];\n\n\n\n    // Takes JSON from Google Sheets and makes it easier to organize.\n    // Col 1: Employee name\n    // Col 2: Email Address\n    // Col 3: Flipgrid\n    // Col 4: Virtual Classroom\n    // Col 5: Missing\n    for (let i = 0; i < 83; i++) {\n      teacherEntries[i] = [data.feed.entry[(5*i) + 5].content.$t, \n                            data.feed.entry[(5*i) + 6].content.$t, \n                            data.feed.entry[(5*i) + 7].content.$t, \n                            data.feed.entry[(5*i) + 8].content.$t, \n                            data.feed.entry[(5*i) + 9].content.$t,\n                            i]\n    }\n\n\n    // Takes all info on each teacher and makes it an object. \n    teacherObjectEntries = teacherEntries.map(entry => {\n      const obj = {\n        id: entry[5],\n        name: entry[0],\n        email: entry[1],\n        flipgrid: entry[2],\n        classroom: entry[3]\n      };\n      return obj;\n    });\n\n\n    console.log(teacherObjectEntries);\n\n    // Sets state\n    this.setState({entries: teacherObjectEntries});\n\n  }\n\n\n\n  componentDidMount() {\n    let url = 'https://spreadsheets.google.com/feeds/cells/1UnWSsGHeVk9ITccEx11U1SIx_YrBATyLTSI8_aJdAYs/1/public/full?alt=json'\n    fetch(url)\n    .then(response => response.json())\n    .then(this.buildList);\n  }\n\n  storeTeacher = (clickedTeacher) => {\n\n\n    this.setState({\n      teacher: clickedTeacher\n    }, () => {\n      console.log('this is the state of the main app');\n      console.log(this.state);\n    })\n  }\n\n  goBack = () => {\n    this.setState({\n      teacher: null\n    })\n  }\n\n\n\n  render() {\n\n    let teacherIsSelected = this.state.teacher;\n\n\n\n    return(\n      // <div>Hello, world!</div>\n      <Container fluid className='mx-0'>\n        <Header \n          pageTitle='Wilson High School Teacher List'\n          subTitle=\"Click on a teacher's name to view their info!\"\n        />\n\n        {!teacherIsSelected \n        ? \n        <TeacherList entries={this.state.entries} click={this.storeTeacher.bind(this)}/>\n        : \n        <div>\n          <Row>\n            <div className='d-flex justify-content-end col'>Name:</div>\n            <div className='d-flex justify-content-start col'>{this.state.teacher.name}</div>\n          </Row>\n          <Row className='space'></Row>\n          <Row>\n            <div className='d-flex justify-content-end col'>Email:</div>\n            <div className='d-flex justify-content-start col'>\n              <a href={'mailto:' + this.state.teacher.email}>{this.state.teacher.email}</a>\n            </div>\n          </Row>\n          <Row className='space'></Row>\n          <Row>\n            <div className='d-flex justify-content-end col'>Flipgrid:</div>\n            <div className='d-flex justify-content-start col'>\n              <a target='_blank' href={this.state.teacher.flipgrid}>{this.state.teacher.flipgrid}</a>\n            </div>\n          </Row>\n          <Row className='space'></Row>\n          <Row>\n            <div className='d-flex justify-content-end col'>Classroom:</div>\n            <div className='d-flex justify-content-start col'>\n              <a target='_blank' href={this.state.teacher.classroom}>{this.state.teacher.classroom}</a>\n            </div>\n          </Row>\n          <Row className='space'></Row>\n          <Row>\n            <div className='d-flex justify-content-center col px-auto'>\n              <Button color='link' onClick={this.goBack}>Go Back</Button>\n            </div>\n          </Row>\n        </div>\n\n      }\n        \n      </Container>\n    )\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}